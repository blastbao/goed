// Code generated by go-bindata.
// sources:
// res/Readme.md
// res/actions/Readme.md
// res/default/actions/goed_helper.ank
// res/default/actions/goimports.sh
// res/default/actions/search.ank
// res/default/config.toml
// res/default/themes/default.toml
// res/resources_version.txt
// res/themes/Readme.md
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xb1\x6e\x1b\x31\x0c\xdd\xef\x2b\x5e\xb7\x04\x70\xed\x3d\x5b\x51\x67\x08\x50\xc4\x05\x9c\xec\xa6\x25\xea\x2c\x54\x77\x3a\x48\x54\x93\x76\xe8\xb7\x57\x92\x75\x71\xce\x68\x33\x8a\x7c\xef\xf1\xf1\x51\x5f\xfd\x28\x3c\x4a\x84\x37\xf8\xb3\x59\xf7\x9e\x35\xee\x3a\xe0\x33\x94\x1f\x8d\xed\xd7\xe2\x07\x87\x3b\x3c\x47\x0e\xb8\x51\x29\xe6\xb7\xfd\xcd\xfa\xb6\xf5\x53\x20\xb1\x7e\x84\xb1\x8e\x2b\x4d\x4e\x3c\x70\xdc\xfc\x93\x72\xee\xad\xa0\x02\x93\x30\x4c\xf0\x03\xa2\xca\x0a\xea\x04\x1f\xb2\xe2\x64\xf3\xf8\x73\x59\x68\xd4\x14\xf4\xa6\xe9\x55\x6d\x52\x65\xd6\x7f\xc4\x5b\xb3\xab\x48\xcd\x86\x92\x93\x82\xdc\x05\xdb\xdb\x91\x1c\xea\x6e\xc5\x67\x76\xa0\x3d\x46\x2f\x60\x6d\x05\xda\x06\x56\xe2\x7e\x81\x22\x5e\xac\x73\x38\x32\x02\x4f\x8e\x54\xc6\xa7\x29\x2f\x97\xa6\x3e\x90\xe6\xb8\x5e\x68\x2f\x03\xda\x37\xc3\x73\x6e\xd8\x5e\x46\x2c\x79\x97\x84\xe6\x25\x5b\x30\x1f\x70\xde\x6d\xfe\x46\x6a\xb5\x2b\x56\xa5\x1d\x93\x31\x1c\x32\x5c\x9d\xcf\x8b\x40\x2f\x73\x11\x9a\x84\x56\xd8\xee\xf0\xb8\x7b\xc2\xfd\xf6\xe1\x09\x9f\x2a\xc9\x8e\x45\x5a\x71\xa3\x51\x7e\x17\x63\x50\x29\x84\xa2\x51\xf3\x9b\x41\x37\xf1\x16\x5f\xbe\x3f\x20\x7a\xf5\x83\xa5\x24\xd3\xbd\x25\x50\x33\x06\x05\x46\x8a\x99\xf2\xfc\xf8\xed\x7e\xbf\x07\xe1\x72\x2d\xfc\xcc\x46\xca\xb7\xe1\x57\x1b\x25\xae\xba\xe8\x61\xf2\x0f\xe0\x57\x1a\x26\xc7\xb0\x06\x47\x2f\x27\x1c\xe6\xbd\x7b\x6f\x06\xa9\x51\x1f\x90\xa7\xe0\x70\x1d\xcc\x7b\x40\x13\x9d\xd9\x8b\xde\x7c\xe0\xe2\x6c\xdd\xfd\x0d\x00\x00\xff\xff\x4d\x01\x5a\xb0\xfe\x02\x00\x00")

func resReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_resReadmeMd,
		"res/Readme.md",
	)
}

func resReadmeMd() (*asset, error) {
	bytes, err := resReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/Readme.md", size: 766, mode: os.FileMode(420), modTime: time.Unix(1440537445, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resActionsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x2e\x2d\x2e\xc9\xcf\x55\x48\x4c\x2e\xc9\xcc\xcf\x2b\x56\x48\xcf\x57\xc8\x48\x2d\x4a\xe5\x02\x04\x00\x00\xff\xff\xc4\x35\xc4\xb2\x17\x00\x00\x00")

func resActionsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_resActionsReadmeMd,
		"res/actions/Readme.md",
	)
}

func resActionsReadmeMd() (*asset, error) {
	bytes, err := resActionsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/actions/Readme.md", size: 23, mode: os.FileMode(420), modTime: time.Unix(1435782197, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resDefaultActionsGoed_helperAnk = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\xc1\x4e\xfb\x30\x0c\xc6\xcf\xcd\x53\xf8\xdf\xff\x25\x95\x50\x81\x07\xd8\x61\xda\xaa\xa9\x97\x21\x31\x04\x07\x84\x50\xd4\xba\x10\xd1\x3a\x95\x93\x0e\x24\xb4\x77\xc7\x69\xc3\xe0\xc8\x2d\xfe\x3e\xfb\x67\x7f\xf9\x0f\x3b\x87\x2d\xbc\x62\x3f\x22\xc3\xe0\xda\xa9\x47\xe8\x1c\x83\xa1\x37\x07\xbe\x61\x3b\x06\x5f\xaa\xa3\x61\xc0\x0f\x6c\x60\x05\x76\x18\x1d\x07\x9d\x3b\x7f\x19\x95\xbc\x50\x2a\x8d\xcd\xa4\x4f\x95\x25\xe6\xd1\xe2\x3b\xd4\x5b\x50\x59\x37\x51\x33\x97\xba\x88\x7e\xc6\x18\x26\x26\x08\xae\xa6\xa0\x9d\x2f\x77\x18\x90\x8e\x3a\xdf\xdd\x54\xdb\xe7\xfb\xba\x7a\xc8\x8b\x42\x65\x27\x95\x9d\x59\x96\x7c\x30\xd4\xa0\xf0\x12\xee\x5b\xf9\x0b\xb2\xde\x1f\xee\xd6\xfb\x4d\xf5\x1b\x7b\x3b\x91\x07\x03\x8d\x1b\x06\x43\xed\x85\xa4\xb3\x41\x5f\x17\x60\x3b\xe8\x8c\xed\x7d\x5a\xc3\x13\x69\xc3\x2f\x7e\xd9\xd2\x0c\xad\xfc\x40\x8c\x5d\x6e\x96\xc1\xd9\x7c\xbc\x7a\x2a\x16\xb7\x5c\x4b\x29\x2d\x51\x15\x65\x64\x4b\xa1\x4f\x84\xd4\x71\x08\xad\x9b\x82\xf4\xc8\x95\xcb\xfb\xc7\x40\xe6\xb3\x21\x6f\x31\x16\x25\xda\x72\xb0\x8e\x0c\x39\x30\x8a\xff\x56\x40\xb6\x9f\xaf\x3a\xaf\x11\x3d\x76\x64\x02\xa8\x96\x38\x52\x9d\x62\xe4\x93\xfa\x0a\x00\x00\xff\xff\x98\x29\x53\x99\xe9\x01\x00\x00")

func resDefaultActionsGoed_helperAnkBytes() ([]byte, error) {
	return bindataRead(
		_resDefaultActionsGoed_helperAnk,
		"res/default/actions/goed_helper.ank",
	)
}

func resDefaultActionsGoed_helperAnk() (*asset, error) {
	bytes, err := resDefaultActionsGoed_helperAnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/default/actions/goed_helper.ank", size: 489, mode: os.FileMode(420), modTime: time.Unix(1440536590, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resDefaultActionsGoimportsSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x4f\xba\x47\xeb\x82\xf7\x0a\xa2\x45\x7a\xa9\xa0\xa2\xc7\x6d\x36\x3b\xe9\x06\x93\x4c\x49\xb2\xad\x42\x7f\xbc\x13\x5b\xa4\x1e\x27\xf3\xe5\xbd\x6f\x66\x57\x6d\xef\x62\xdb\xeb\x3c\xaa\x4c\x05\x73\xfa\xc2\xcc\x6a\xe7\x41\x3a\xf9\x6f\xa5\x66\x78\x99\x22\xb6\xec\xc2\x8e\x53\xc9\xe0\x08\x2d\x23\x32\x4f\xc9\x10\xac\xf3\x74\x2d\x90\xd5\xde\x67\xf4\xda\x7c\xa2\xb0\xec\x6d\x28\x70\xf6\xe2\x5f\xe4\x02\xbd\x97\x60\xdd\x7b\xba\x51\x6a\xef\xe8\xb0\x68\x9e\x9e\x97\x8f\xdd\xfb\x6a\xf9\xa1\x5c\xcc\xe5\x3c\xaf\xd6\xaf\x6f\xf7\xeb\x87\x65\x2d\xdf\x8a\x53\xed\x80\x67\xa3\x8b\xe3\xa8\x72\x32\x8b\xcd\x96\x69\xe8\xf4\xce\xa1\xc6\x74\xf2\xd4\xc9\x1e\x4d\x0d\x41\x53\xdf\x36\xca\x84\x61\xf1\x57\xaf\x0e\xa3\x33\xe3\x85\xce\xed\x1d\xda\x81\xf6\x6d\x9c\xbc\xc7\xf1\x88\x13\x2d\xd6\xd2\x99\xe4\xe0\x32\x12\x0c\x87\xa0\xe3\x50\x4f\xae\x63\xd5\x50\x8d\x80\x98\x1f\xd0\x48\x67\x45\xc9\xb3\x1e\x7e\x2d\xd0\x4f\xd6\x52\x82\x4d\x1c\x4e\xec\x7f\xc9\x33\x7a\xe1\x08\xf5\x13\x00\x00\xff\xff\x61\x60\xee\x9a\x7e\x01\x00\x00")

func resDefaultActionsGoimportsShBytes() ([]byte, error) {
	return bindataRead(
		_resDefaultActionsGoimportsSh,
		"res/default/actions/goimports.sh",
	)
}

func resDefaultActionsGoimportsSh() (*asset, error) {
	bytes, err := resDefaultActionsGoimportsShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/default/actions/goimports.sh", size: 382, mode: os.FileMode(493), modTime: time.Unix(1439485839, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resDefaultActionsSearchAnk = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x41\x4e\x2b\x31\x0c\x86\xd7\xcf\xa7\xf0\x4b\x37\x89\x18\xa6\xbd\xc0\x20\x01\x0b\xb6\x88\x2e\xab\x0a\x45\x53\x37\x8d\x08\xf1\xc8\x99\x41\x48\x88\xbb\xe3\x04\x01\x85\xa5\x7f\x7f\xfe\xec\x64\xf5\xdf\xe7\x27\x06\x48\xec\x0f\xd6\x04\xa6\xc3\xe3\x89\xd2\x44\xd2\x6b\x6e\x1c\xc0\x8b\x17\xe4\xd2\xe1\x31\xf9\xd0\x21\xbd\xd2\x88\x03\xc6\xe7\x89\x65\xb6\x86\x8b\x71\xdd\x77\x55\x91\xf3\x9a\xcb\xba\xf2\xd5\xb2\xc2\x7b\x2f\x85\xd0\x4b\x28\xb8\x6e\xb2\x02\x31\x64\x16\xba\xf5\x9a\x0f\x2d\xea\x6f\x98\x93\x35\xd1\xe8\x3a\x9f\x0a\x75\x68\x7e\x18\xd5\x34\xa6\x89\xac\xd3\x8b\xc7\xaf\xb1\x6b\xb5\x5a\xb7\xdb\xec\xa1\xf9\x07\xdc\x99\x20\x34\x99\x3d\xc4\x23\x9e\x6f\x19\x70\x96\x85\xf0\x0d\xfe\x35\xf0\xa2\x92\x97\x51\xb9\xf7\x4a\x26\xca\x56\xad\x0e\xaf\x70\xf3\x87\x11\x3d\x49\x5b\x0a\x22\xe9\x61\xbf\xba\x9f\x79\x7d\xe3\xc3\x92\xb1\x90\x97\xf1\x04\x77\xfa\x93\xbd\x2c\xd9\xce\xbc\x9d\x25\xe6\xb0\x4d\x71\x24\x5b\x87\x9c\x83\x8f\x00\x00\x00\xff\xff\x67\xc3\xad\xc5\x76\x01\x00\x00")

func resDefaultActionsSearchAnkBytes() ([]byte, error) {
	return bindataRead(
		_resDefaultActionsSearchAnk,
		"res/default/actions/search.ank",
	)
}

func resDefaultActionsSearchAnk() (*asset, error) {
	bytes, err := resDefaultActionsSearchAnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/default/actions/search.ank", size: 374, mode: os.FileMode(420), modTime: time.Unix(1440533922, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resDefaultConfigToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x70\x49\x4d\x4b\x2c\xcd\x29\x51\x48\xce\xcf\x4b\xcb\x4c\xe7\x0a\xae\xcc\x2b\x49\xac\xf0\xc8\x4c\xcf\xc8\x01\xe2\x92\xcc\xbc\x74\xdb\x92\xa2\xd2\x54\xae\x90\x8c\xd4\xdc\x54\x5b\xa5\x14\x88\x6a\xbd\x92\xfc\xdc\x1c\x25\x2e\xdf\xc4\x0a\xe7\xdc\x14\xa7\xd2\xb4\xb4\xd4\x22\x9f\xcc\xbc\xd4\x62\x5b\x43\x03\x20\x00\x04\x00\x00\xff\xff\x79\xef\x87\x0b\x55\x00\x00\x00")

func resDefaultConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_resDefaultConfigToml,
		"res/default/config.toml",
	)
}

func resDefaultConfigToml() (*asset, error) {
	bytes, err := resDefaultConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/default/config.toml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1435780539, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resDefaultThemesDefaultToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xbb\x8e\xda\x40\x18\x85\x7b\x9e\x02\xb9\x9e\x62\xc6\x36\x06\x17\x2e\xf0\x5c\x9a\x28\x4a\x61\x92\xde\xc0\x88\x58\xb2\x19\x34\x18\x11\xa4\x14\xe9\x90\xd2\xe5\xde\x90\x22\x8a\xb4\xda\xe7\xe2\x49\xf6\xf7\x5c\xcc\x2e\x8b\x70\x05\xe7\xff\xce\x99\x33\xbf\x26\x5f\x65\x01\x9f\x62\xf3\x05\x03\x01\xff\x98\xc0\x11\x16\x98\x04\x83\x7c\x55\xc8\x5a\x2e\xda\x5e\x33\x84\xd7\x9c\xcb\x70\x74\xa7\xb7\x4a\x67\x41\x48\x70\xe2\x39\xaf\x5d\x38\xaa\x9a\x46\xae\xc1\x2a\xc6\x78\x6c\xb1\xa2\xd5\xd5\x1a\x0e\x8d\x53\x6f\x7c\x23\x0f\x7b\xa5\x97\xc4\x84\xb9\x22\x4e\x0b\xb3\x20\x11\x57\x5a\x04\x5a\xea\xb5\x42\x6e\x4a\x5d\xb6\x4a\x83\x3b\xc6\x78\xe4\xce\xf0\x2a\xf8\xd3\xd1\x2b\x15\x12\x78\xd8\xab\x87\x66\xae\x6a\xb0\x53\x8a\x63\x17\x6a\x24\xf0\x4e\xd8\x4b\x09\x8c\x8c\xf4\x52\x5b\xb6\xbb\xed\xbc\xd4\xc3\x6c\x18\x9c\xff\x7e\x45\x3c\x87\x3b\xc2\xd7\xfd\x70\xdb\xed\x99\x99\xfc\xd4\x76\x5c\xce\x92\xe4\xc6\x88\x6b\x93\x82\x09\x1d\xb9\xc5\x35\xcb\xfb\xc9\x16\xb8\xc4\xc2\x42\xae\xf4\x77\x6b\x33\x11\xe6\x40\x88\xfc\x50\xc9\xbd\xcf\xfc\xf2\x03\x71\xe6\x33\x99\xcf\x74\x84\x0f\xe5\x63\x1c\xba\x47\x52\xd5\x92\xd6\xb2\x34\x89\xe7\xd3\x4f\x44\xa8\x1d\x21\x9e\xf6\x0f\x09\x18\x56\xe9\xf6\x60\x99\x3f\x08\x1e\x01\xe9\x4e\x7e\xc6\x14\x0b\xad\xea\xda\x97\xf8\xfd\x0d\x41\x37\xb3\x0e\x64\xb7\x72\x61\x66\xe5\xdc\x32\xdf\x51\x12\x7b\x26\xf6\xcc\x5b\xa5\x65\xd7\xb2\xa8\x96\xd2\xde\xe7\x01\x11\x81\x63\x5b\x69\x7a\x8d\xbd\xdf\x18\xe8\xf8\xef\x1e\xc4\xd4\xde\x5e\xef\xf8\xff\x16\x06\x85\xe8\x47\x57\xfc\xf8\x88\xb8\xb0\x83\x8e\x98\xb8\xa0\x52\xaf\x2a\x13\xf1\xf9\xd6\x98\xd6\x6a\x6b\xcb\x9e\x7e\xa1\x28\x72\x77\xe2\xd4\xcd\x9f\x02\x00\x00\xff\xff\x63\x53\xd3\x5b\x96\x03\x00\x00")

func resDefaultThemesDefaultTomlBytes() ([]byte, error) {
	return bindataRead(
		_resDefaultThemesDefaultToml,
		"res/default/themes/default.toml",
	)
}

func resDefaultThemesDefaultToml() (*asset, error) {
	bytes, err := resDefaultThemesDefaultTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/default/themes/default.toml", size: 918, mode: os.FileMode(420), modTime: time.Unix(1435780812, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resResources_versionTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\x34\x31\x31\xb0\x34\x35\x31\xb0\x30\xe1\x02\x04\x00\x00\xff\xff\x68\xfb\x2a\xa9\x0b\x00\x00\x00")

func resResources_versionTxtBytes() ([]byte, error) {
	return bindataRead(
		_resResources_versionTxt,
		"res/resources_version.txt",
	)
}

func resResources_versionTxt() (*asset, error) {
	bytes, err := resResources_versionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/resources_version.txt", size: 11, mode: os.FileMode(420), modTime: time.Unix(1440954084, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resThemesReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x2e\x2d\x2e\xc9\xcf\x55\x28\xc9\x48\xcd\x4d\x2d\x56\x48\xcf\x57\xc8\x48\x2d\x4a\xe5\x02\x04\x00\x00\xff\xff\x26\x56\x89\xea\x16\x00\x00\x00")

func resThemesReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_resThemesReadmeMd,
		"res/themes/Readme.md",
	)
}

func resThemesReadmeMd() (*asset, error) {
	bytes, err := resThemesReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/themes/Readme.md", size: 22, mode: os.FileMode(420), modTime: time.Unix(1435782185, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/Readme.md": resReadmeMd,
	"res/actions/Readme.md": resActionsReadmeMd,
	"res/default/actions/goed_helper.ank": resDefaultActionsGoed_helperAnk,
	"res/default/actions/goimports.sh": resDefaultActionsGoimportsSh,
	"res/default/actions/search.ank": resDefaultActionsSearchAnk,
	"res/default/config.toml": resDefaultConfigToml,
	"res/default/themes/default.toml": resDefaultThemesDefaultToml,
	"res/resources_version.txt": resResources_versionTxt,
	"res/themes/Readme.md": resThemesReadmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"Readme.md": &bintree{resReadmeMd, map[string]*bintree{
		}},
		"actions": &bintree{nil, map[string]*bintree{
			"Readme.md": &bintree{resActionsReadmeMd, map[string]*bintree{
			}},
		}},
		"default": &bintree{nil, map[string]*bintree{
			"actions": &bintree{nil, map[string]*bintree{
				"goed_helper.ank": &bintree{resDefaultActionsGoed_helperAnk, map[string]*bintree{
				}},
				"goimports.sh": &bintree{resDefaultActionsGoimportsSh, map[string]*bintree{
				}},
				"search.ank": &bintree{resDefaultActionsSearchAnk, map[string]*bintree{
				}},
			}},
			"config.toml": &bintree{resDefaultConfigToml, map[string]*bintree{
			}},
			"themes": &bintree{nil, map[string]*bintree{
				"default.toml": &bintree{resDefaultThemesDefaultToml, map[string]*bintree{
				}},
			}},
		}},
		"resources_version.txt": &bintree{resResources_versionTxt, map[string]*bintree{
		}},
		"themes": &bintree{nil, map[string]*bintree{
			"Readme.md": &bintree{resThemesReadmeMd, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

